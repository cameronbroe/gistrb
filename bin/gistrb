#!/usr/bin/env ruby
require File.expand_path('../../lib/gist', __FILE__) # Require the Gist library files
require 'optparse'

options = {}
OptionParser.new do |opts|
  opts.banner = 'Usage: gist [options] files'
  opts.on('-u', '--user', 'Post as user') do |u|
    options[:user] = u
  end

  opts.on('-s', '--sign-in', 'Sign in as user') do |s|
    options[:sign_in] = s
  end

  opts.on('-n', '--netrc', 'Use information from netrc when signing in') do |n|
    options[:netrc] = n
  end

  opts.on('--sign-out', 'Clear out saved user') do |s|
    options[:sign_out] = s
  end

  opts.on('-p', '--public', 'Make the gist public') do |p|
    options[:public] = p
  end

  opts.on('-d [DESC]', '--description [DESC]', String, 'Description of the gist') do |d|
    options[:description] = d
  end

  opts.on('-c', '--clipboard', 'Save the gist URL to clipboard') do |c|
    options[:clipboard] = c
  end
end.parse!

# Copy ARGV into another array then clear it, to make gets behave properly
files = ARGV.clone
ARGV.clear

if options[:sign_out]
  File.delete(Gist::ACCESS_TOKEN_PATH) if File.exist?(Gist::ACCESS_TOKEN_PATH)
  exit
end

if options[:sign_in]
  print 'Username: '
  username = gets.chomp
  password = Gist::Helpers.get_password
  @user = Gist::User.new(username, password, options[:netrc])
  @user.authenticate
  exit
end

# Get anything sent by STDIN to support cat and pasting.
stdin = STDIN.read if !STDIN.tty? || files.empty?

if options[:user]
  @user = Gist::User.new(nil, nil, options[:netrc])
  @user.authenticate
  unless @user.access_token
    STDERR.puts 'ERROR: There is no user saved. You need to sign in.'
    exit
  end
  post = Gist::Post.new(files, options[:public], options[:description], @user)
else
  post = Gist::Post.new(files, options[:public], options[:description])
end
gist_url = post.submit(stdin)

Clipboard.copy(gist_url) if options[:clipboard]

puts gist_url
